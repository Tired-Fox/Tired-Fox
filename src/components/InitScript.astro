---
---

<script>
  import { Toast } from "../scripts/toast.ts";

  type SwipeHandlers = {
    up?: () => void,
    down?: () => void,
    right?: () => void,
    left?: () => void
  };
  type Theme = "light" | "dark";

  const storageKey = "TiredFox-";
  let theme: Theme = "light";
  const notify = new Toast(
    "1. Use the icons on the left to toggle the menu, navigate, and display these messages.",
    "2. The color theme can be changed with <code>Alt + T</code>"
  );
  const navigation = document.getElementById('navigation');
  const iconNav = document.getElementById('icon-nav');
  navigation?.addEventListener("touchstart", handleTouchStart, false);
  iconNav?.addEventListener("touchstart", handleTouchStart, false);
  navigation?.addEventListener("touchmove", (e) => handleTouchMove(e, {
    left: () => navigation?.classList.add('hide')
  }), false);
  iconNav?.addEventListener("touchmove", (e) => handleTouchMove(e, {
    right: () => navigation?.classList.remove('hide')
  }), false);

  export function setTheme(new_theme: Theme) {
    theme = new_theme;
    saveTheme(theme);
    document.body.setAttribute("data-theme", theme);
  }

  export function saveTheme(theme: Theme) {
    localStorage.setItem(`${storageKey}Theme`, theme);
  }

  export function loadTheme(): Theme {
    return localStorage.getItem(`${storageKey}Theme`) === "dark"
      ? "dark"
      : "light";
  }

  export function toggleTheme() {
    if (theme === "light") {
      setTheme("dark");
    } else {
      setTheme("light");
    }
  }

  function getToasted() {
    const toastedDate = new Date(
      Number(localStorage.getItem(`${storageKey}Toasted`) || "0")
    );
    return Number.isNaN(toastedDate) || toastedDate <= new Date()
      ? false
      : true;
  }

  function setToasted(expires: number) {
    let currDate = new Date();
    let result = currDate.setDate(currDate.getDate() + expires);
    localStorage.setItem(`${storageKey}Toasted`, result.toString());
  }

  function toastAll(duration?: number) {
    // Show this toast message that will disapear in 5 seconds
    const setCooldown = () => setToasted(30);
    notify.activate(duration, setCooldown);
  }

  window.onload = () => {
    setTheme(loadTheme());
    document.addEventListener("keydown", (event) => {
      if (event.altKey && event.key === "t") {
        setTheme(theme === "light" ? "dark" : "light");
      }
    });

    for (const element of document.getElementsByClassName("theme-toggle")) {
      element.addEventListener("click", () => toggleTheme());
    }

    const themeHelp = document.getElementById("theme-help");
    if (themeHelp) {
      themeHelp.addEventListener("click", () => {
        toastAll();
      });
    }

    let notify = setInterval(() => {
      if (!getToasted()) {
        toastAll(5000);
      }
      clearInterval(notify);
    }, 1000);
  };

  var xDown: any = null;
  var yDown: any = null;

  function getTouches(evt: TouchEvent) {
    return evt.touches;
  }

  function handleTouchStart(evt: TouchEvent) {
    const firstTouch = getTouches(evt)[0];
    xDown = firstTouch.clientX;
    yDown = firstTouch.clientY;
  }

  function handleTouchMove(evt: TouchEvent, handlers: SwipeHandlers) {
    if (!xDown || !yDown) {
      return;
    }

    var xUp = evt.touches[0].clientX;
    var yUp = evt.touches[0].clientY;

    var xDiff = xDown - xUp;
    var yDiff = yDown - yUp;

    if (Math.abs(xDiff) > Math.abs(yDiff)) {
      /*most significant*/
      if (xDiff > 0) {
        /* left swipe */
        if (handlers.left) {
            handlers.left()
        }
      } else {
        if (handlers.right) {
            handlers.right()
        }
        /* right swipe */
      }
    } else {
      if (yDiff > 0) {
        /* down swipe */
        if (handlers.down) {
            handlers.down()
        }
      } else {
        /* up swipe */
        if (handlers.up) {
            handlers.up()
        }
      }
    }
    /* reset values */
    xDown = null;
    yDown = null;
  }
</script>
