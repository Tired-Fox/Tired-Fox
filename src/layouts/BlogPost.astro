---
import type { MarkdownHeading } from "astro";
import FormattedDate from "../components/FormattedDate.astro";
import type { Link, Section } from "../scripts/navigation";
import Blueprint from "./Blueprint.astro";
import type { CollectionEntry } from "astro:content";

type Props = CollectionEntry<"blog">["data"] & {
  headLinks?: MarkdownHeading[];
};
const {
  tags = [],
  title,
  description,
  pubDate,
  updatedDate,
  headLinks,
} = Astro.props;

const generateHeaderLinks = (): Link[] => {
  return [
    {
      src: "#top",
      display: "Top",
    },
    ...(headLinks as MarkdownHeading[])
      .filter((heading) => heading.depth === 2)
      .map((heading) => {
        return {
          name: "heading",
          src: `#${heading.slug}`,
          display: heading.text,
        };
      }),
    {
      src: "#bottom",
      display: "Bottom",
    },
  ];
};

const pages: Section = {
  name: "Pages",
  links: [
    {
      src: "/",
      display: "Home",
    },
    {
      src: "/blog/",
      display: "Blog",
    },
  ],
};

const tagColors = ["yellow", "red", "blue", "green", "purple", "orange"];
---

<Blueprint links={generateHeaderLinks()}>
  <article>
    <h1>{title}</h1>
    <div id="head-info">
      <FormattedDate date={pubDate} />
      <span id="tags">
        {
          tags.map((tag, index) => (
            <span class={tagColors[index % tagColors.length]}>{tag}</span>
          ))
        }
      </span>
    </div>
    {
      updatedDate && (
        <div class="last-updated-on">
          Last updated on <FormattedDate date={updatedDate} />
        </div>
      )
    }
    <hr />
    <slot />
  </article>
  <style lang="scss">
    #head-info {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }
    @media only screen and (min-width: 700px) {
      #head-info {
        display: flex;
        justify-content: space-between;
      }
    }
    time {
      display: inline-block;
      width: fit-content;
    }
  </style>
</Blueprint>
